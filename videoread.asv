
file_dir = './GOPR0005/'; %put here one of the folder locations with images;
filenames = dir([file_dir '*.jpg']);

frame = imread([file_dir filenames(1).name]);
grey_back = rgb2gray(frame);

figure(1); h1 = imshow(apply_mask(generate_keying_mask(grey_back, grey_back, 0), grey_back));

READJUSTMENT_THRESH = 1e-4;
BACKGROUND_LOOKBACK = 5;

OBJECT_LINKING_DIST_THRESH = 14; % sqrt(10^2 + 10^2 + 2^3)
OBJECT_LOOKBACK = 3;

INITIAL_FRAME = 200;

[X, Y] = size(grey_back);
global IMG_WIDTH
IMG_WIDTH = X;

[frame_count, x] = size(filenames);
prev_frames = {};
prev_frames{frame_count} = []; % preallocation
object_history = {};
object_history{frame_count} = {};

% Read one frame at a time.
for k = INITIAL_FRAME : frame_count

    % Read in the next frame and convert it to grayscale
    frame = imread([file_dir filenames(k).name]);
    scene = rgb2gray(frame);

    % Generate the mask and expand the blobs in it
    mask = generate_keying_mask(scene, grey_back, 0);
    mask = bwdist(mask) <= 5;
    
    % Apply the mask to the frame for later display
    masked_frame = apply_mask(mask, frame);

    % Find the connected components in the mask
    conn_comp = bwconncomp(mask);
    
    % Find objects from the connected components and check if they are at
    % their apex
    [object_history, new_objs] = update_objects(k, object_history, conn_comp, OBJECT_LOOKBACK, OBJECT_LINKING_DIST_THRESH);
    object_history = assign_apexes(k, object_history);
    
    X = max(size(object_history{k}));
    obj_at_apex = 0;
    
    for i=1:X,
        obj = object_history{k}{i};
        
        if obj.apex_found == 1
            % Display a cross on the frame
            masked_frame = insertMarker(masked_frame, [obj.x, obj.y]);
            
            % Mark that the apex of this object has been processed and
            % should no longer be checked
            object_history{k}{i}.apex_found = 2;
            
            obj_at_apex = 1;
        end
    end

    if k > INITIAL_FRAME
        masked_frame = show_paths(masked_frame, object_history, k, INITIAL_FRAME);
    end

    % Display the frame with the mask applied
    set(h1, 'CData', masked_frame);
    drawnow('expose');
    
    % Check if we need to pause for the apex frame
    if obj_at_apex == 1
        pause(3);
    end
    
    % Update the background reference image
    [grey_back, prev_frames] = update_background(k, grey_back, prev_frames, mask, scene, BACKGROUND_LOOKBACK, READJUSTMENT_THRESH, INITIAL_FRAME);
    
    % Print processing info
    disp(['showing frame ' num2str(k) ', current objects: ' num2str(conn_comp.NumObjects) ' (' num2str(new_objs) ' new)']);
end

